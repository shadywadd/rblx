-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- UI Library (Rayfield)
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Window Setup
local Window = Rayfield:CreateWindow({
    Name = "Weapon Stealer Gui",
    LoadingTitle = "Weapon Stealer Gui",
    LoadingSubtitle = "by shadywadd",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "WeaponStealer"
    },
    Discord = {
        Enabled = false
    },
    KeySystem = false
})

-- Tab
local MainTab = Window:CreateTab("Main", 4483362458)

-- State variables
local jumpEnabled = false
local walkspeedLocked = false
local desiredWalkspeed = 30

-- Function: Monitor and Lock Walkspeed
local function monitorWalkSpeed()
    local function bind()
        local char = workspace:FindFirstChild("Characters")
        if not char then return end
        char = char:FindFirstChild(LocalPlayer.Name)
        if not char then return end

        local ws = char:FindFirstChild("WalkSpeed")
        if not ws or not ws:IsA("NumberValue") then return end

        if ws.Value ~= desiredWalkspeed then
            ws.Value = desiredWalkspeed
        end

        ws:GetPropertyChangedSignal("Value"):Connect(function()
            if walkspeedLocked and ws.Value ~= desiredWalkspeed then
                ws.Value = desiredWalkspeed
            end
        end)
    end

    -- Run on load and on character added
    bind()
    LocalPlayer.CharacterAdded:Connect(function()
        task.wait(1)
        bind()
    end)
end

-- Function: Handle Jump Without Cooldown
local function setupJumpListener()
    UIS.JumpRequest:Connect(function()
        if not jumpEnabled then return end
        local char = LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChildWhichIsA("Humanoid")
            if humanoid and humanoid:GetState() == Enum.HumanoidStateType.Running then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end
    end)
end

-- GUI Components
MainTab:CreateToggle({
    Name = "No Jump Cooldown",
    CurrentValue = false,
    Callback = function(Value)
        jumpEnabled = Value
    end
})

MainTab:CreateToggle({
    Name = "Enforce WalkSpeed",
    CurrentValue = false,
    Callback = function(Value)
        walkspeedLocked = Value
        if Value then
            monitorWalkSpeed()
        end
    end
})

MainTab:CreateSlider({
    Name = "WalkSpeed Value",
    Range = {1, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = desiredWalkspeed,
    Callback = function(Value)
        desiredWalkspeed = Value
    end
})

-- Initialize
setupJumpListener()
